/*
 * Copyright 2020 THG
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.thehutgroup', name: 'bucket-versioning', version: '[0.1.0,)'
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'java-gradle-plugin'
}

apply plugin: 'com.thehutgroup.BucketVersioning'

group 'com.thehutgroup'
version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.8', ext: 'pom'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.13'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.779'
    compile group: 'org.apache.maven', name: 'maven-repository-metadata', version: '3.5.4'


    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
}

versioning {
    storageProvider = "S3"
    s3BucketName = "thg-voyager-maven"
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Source-Git-Hash': getGitHash())
    }
}